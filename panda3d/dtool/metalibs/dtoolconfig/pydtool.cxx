/*
 * This file generated by:
 * interrogate -D EXPCL_DTOOLCONFIG= -nodb -python -promiscuous -I /usr/local/panda/include -module dtoolconfig -library libp3dtoolconfig -true-names -do-module -oc pydtool.cxx ../../src/interrogatedb/interrogate_interface.h 
 *
 */

#include <sstream>

#include "../../src/interrogatedb/interrogate_interface.h"
#include "dtoolbase.h"

#undef HAVE_LONG_LONG
#undef _POSIX_C_SOURCE

#if PYTHON_FRAMEWORK
  #include "Python/Python.h"
#else
  #include "Python.h"
#endif
#ifdef HAVE_LONG_LONG
#undef HAVE_LONG_LONG
#endif 

static PyObject *_inPzUjAtbRf(PyObject *self, PyObject *args);
static PyObject *_inPzUjAda_g(PyObject *self, PyObject *args);
static PyObject *_inPzUjA4RgX(PyObject *self, PyObject *args);
static PyObject *_inPzUjA3Gip(PyObject *self, PyObject *args);
static PyObject *_inPzUjARKDz(PyObject *self, PyObject *args);
static PyObject *_inPzUjAgZ9N(PyObject *self, PyObject *args);
static PyObject *_inPzUjARQIx(PyObject *self, PyObject *args);
static PyObject *_inPzUjAGVSj(PyObject *self, PyObject *args);
static PyObject *_inPzUjAznM6(PyObject *self, PyObject *args);
static PyObject *_inPzUjAjiLg(PyObject *self, PyObject *args);
static PyObject *_inPzUjA_yjE(PyObject *self, PyObject *args);
static PyObject *_inPzUjAzK9F(PyObject *self, PyObject *args);
static PyObject *_inPzUjAJju_(PyObject *self, PyObject *args);
static PyObject *_inPzUjAZktk(PyObject *self, PyObject *args);
static PyObject *_inPzUjAG71J(PyObject *self, PyObject *args);
static PyObject *_inPzUjAgeUs(PyObject *self, PyObject *args);
static PyObject *_inPzUjAkg95(PyObject *self, PyObject *args);
static PyObject *_inPzUjAluRc(PyObject *self, PyObject *args);
static PyObject *_inPzUjAwtTf(PyObject *self, PyObject *args);
static PyObject *_inPzUjArfao(PyObject *self, PyObject *args);
static PyObject *_inPzUjAcedk(PyObject *self, PyObject *args);
static PyObject *_inPzUjAXmoo(PyObject *self, PyObject *args);
static PyObject *_inPzUjAclIo(PyObject *self, PyObject *args);
static PyObject *_inPzUjAU2_B(PyObject *self, PyObject *args);
static PyObject *_inPzUjAHFO2(PyObject *self, PyObject *args);
static PyObject *_inPzUjAcfjm(PyObject *self, PyObject *args);
static PyObject *_inPzUjA3Sjw(PyObject *self, PyObject *args);
static PyObject *_inPzUjAgJcX(PyObject *self, PyObject *args);
static PyObject *_inPzUjAYlw6(PyObject *self, PyObject *args);
static PyObject *_inPzUjA3gns(PyObject *self, PyObject *args);
static PyObject *_inPzUjAN968(PyObject *self, PyObject *args);
static PyObject *_inPzUjAFJVJ(PyObject *self, PyObject *args);
static PyObject *_inPzUjAndTW(PyObject *self, PyObject *args);
static PyObject *_inPzUjApjWj(PyObject *self, PyObject *args);
static PyObject *_inPzUjANcQW(PyObject *self, PyObject *args);
static PyObject *_inPzUjAP_SX(PyObject *self, PyObject *args);
static PyObject *_inPzUjA1iRq(PyObject *self, PyObject *args);
static PyObject *_inPzUjAEmel(PyObject *self, PyObject *args);
static PyObject *_inPzUjA20Vx(PyObject *self, PyObject *args);
static PyObject *_inPzUjAKcdW(PyObject *self, PyObject *args);
static PyObject *_inPzUjAhUs9(PyObject *self, PyObject *args);
static PyObject *_inPzUjAhF25(PyObject *self, PyObject *args);
static PyObject *_inPzUjAu1qB(PyObject *self, PyObject *args);
static PyObject *_inPzUjAKMkY(PyObject *self, PyObject *args);
static PyObject *_inPzUjARx9W(PyObject *self, PyObject *args);
static PyObject *_inPzUjA0C9G(PyObject *self, PyObject *args);
static PyObject *_inPzUjAhaPp(PyObject *self, PyObject *args);
static PyObject *_inPzUjAt_1v(PyObject *self, PyObject *args);
static PyObject *_inPzUjA8KQG(PyObject *self, PyObject *args);
static PyObject *_inPzUjAEtIl(PyObject *self, PyObject *args);
static PyObject *_inPzUjARFmo(PyObject *self, PyObject *args);
static PyObject *_inPzUjAWHA0(PyObject *self, PyObject *args);
static PyObject *_inPzUjAcyIl(PyObject *self, PyObject *args);
static PyObject *_inPzUjABnBv(PyObject *self, PyObject *args);
static PyObject *_inPzUjAUvW7(PyObject *self, PyObject *args);
static PyObject *_inPzUjAPdXf(PyObject *self, PyObject *args);
static PyObject *_inPzUjAd0dl(PyObject *self, PyObject *args);
static PyObject *_inPzUjAdVbH(PyObject *self, PyObject *args);
static PyObject *_inPzUjABwF0(PyObject *self, PyObject *args);
static PyObject *_inPzUjA9dPK(PyObject *self, PyObject *args);
static PyObject *_inPzUjAhUwR(PyObject *self, PyObject *args);
static PyObject *_inPzUjAA1eF(PyObject *self, PyObject *args);
static PyObject *_inPzUjA8pBy(PyObject *self, PyObject *args);
static PyObject *_inPzUjA85oW(PyObject *self, PyObject *args);
static PyObject *_inPzUjAYZz0(PyObject *self, PyObject *args);
static PyObject *_inPzUjAzKCA(PyObject *self, PyObject *args);
static PyObject *_inPzUjAsxxs(PyObject *self, PyObject *args);
static PyObject *_inPzUjAMT0z(PyObject *self, PyObject *args);
static PyObject *_inPzUjAiW3v(PyObject *self, PyObject *args);
static PyObject *_inPzUjA4Px8(PyObject *self, PyObject *args);
static PyObject *_inPzUjANHcs(PyObject *self, PyObject *args);
static PyObject *_inPzUjAqHrb(PyObject *self, PyObject *args);
static PyObject *_inPzUjAaOqq(PyObject *self, PyObject *args);
static PyObject *_inPzUjAvue5(PyObject *self, PyObject *args);
static PyObject *_inPzUjAB_n_(PyObject *self, PyObject *args);
static PyObject *_inPzUjADFET(PyObject *self, PyObject *args);
static PyObject *_inPzUjAUyNE(PyObject *self, PyObject *args);
static PyObject *_inPzUjApDlm(PyObject *self, PyObject *args);
static PyObject *_inPzUjAAscF(PyObject *self, PyObject *args);
static PyObject *_inPzUjAYjbU(PyObject *self, PyObject *args);
static PyObject *_inPzUjAWmpU(PyObject *self, PyObject *args);
static PyObject *_inPzUjAnegH(PyObject *self, PyObject *args);
static PyObject *_inPzUjArrnF(PyObject *self, PyObject *args);
static PyObject *_inPzUjA7ShX(PyObject *self, PyObject *args);
static PyObject *_inPzUjAx_aO(PyObject *self, PyObject *args);
static PyObject *_inPzUjApofZ(PyObject *self, PyObject *args);
static PyObject *_inPzUjA2J9C(PyObject *self, PyObject *args);
static PyObject *_inPzUjAA6iz(PyObject *self, PyObject *args);
static PyObject *_inPzUjAa78E(PyObject *self, PyObject *args);
static PyObject *_inPzUjAWD3W(PyObject *self, PyObject *args);
static PyObject *_inPzUjAYuud(PyObject *self, PyObject *args);
static PyObject *_inPzUjAlmJS(PyObject *self, PyObject *args);
static PyObject *_inPzUjALlrr(PyObject *self, PyObject *args);
static PyObject *_inPzUjAw_wy(PyObject *self, PyObject *args);
static PyObject *_inPzUjAgk_l(PyObject *self, PyObject *args);
static PyObject *_inPzUjAXpHY(PyObject *self, PyObject *args);
static PyObject *_inPzUjAHhIg(PyObject *self, PyObject *args);
static PyObject *_inPzUjAff0T(PyObject *self, PyObject *args);
static PyObject *_inPzUjA5PPX(PyObject *self, PyObject *args);
static PyObject *_inPzUjAPww5(PyObject *self, PyObject *args);
static PyObject *_inPzUjAPke3(PyObject *self, PyObject *args);
static PyObject *_inPzUjAJmw3(PyObject *self, PyObject *args);
static PyObject *_inPzUjAR0Lc(PyObject *self, PyObject *args);
static PyObject *_inPzUjAc6gE(PyObject *self, PyObject *args);
static PyObject *_inPzUjA1iT0(PyObject *self, PyObject *args);
static PyObject *_inPzUjAz1Mn(PyObject *self, PyObject *args);
static PyObject *_inPzUjAWlf2(PyObject *self, PyObject *args);
static PyObject *_inPzUjA1q8q(PyObject *self, PyObject *args);
static PyObject *_inPzUjAobo6(PyObject *self, PyObject *args);
static PyObject *_inPzUjAjevK(PyObject *self, PyObject *args);
static PyObject *_inPzUjAeBpM(PyObject *self, PyObject *args);
static PyObject *_inPzUjAfmeN(PyObject *self, PyObject *args);
static PyObject *_inPzUjAKBCl(PyObject *self, PyObject *args);
static PyObject *_inPzUjA936K(PyObject *self, PyObject *args);
static PyObject *_inPzUjAPPXQ(PyObject *self, PyObject *args);
static PyObject *_inPzUjAnu86(PyObject *self, PyObject *args);
static PyObject *_inPzUjAngiq(PyObject *self, PyObject *args);
static PyObject *_inPzUjAUXR0(PyObject *self, PyObject *args);
static PyObject *_inPzUjADO7D(PyObject *self, PyObject *args);
static PyObject *_inPzUjAhZFz(PyObject *self, PyObject *args);
static PyObject *_inPzUjAnKPe(PyObject *self, PyObject *args);
static PyObject *_inPzUjAP3lS(PyObject *self, PyObject *args);
static PyObject *_inPzUjAUlLp(PyObject *self, PyObject *args);
static PyObject *_inPzUjA9Xei(PyObject *self, PyObject *args);
static PyObject *_inPzUjAaGkE(PyObject *self, PyObject *args);
static PyObject *_inPzUjAoe_l(PyObject *self, PyObject *args);
static PyObject *_inPzUjAuEdH(PyObject *self, PyObject *args);


/*
 * Python simple wrapper for
 * void interrogate_add_search_directory(char const *dirname)
 */
static PyObject *
_inPzUjAtbRf(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    interrogate_add_search_directory((char const *)param0);
    return Py_BuildValue("");
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * void interrogate_add_search_path(char const *pathstring)
 */
static PyObject *
_inPzUjAda_g(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    interrogate_add_search_path((char const *)param0);
    return Py_BuildValue("");
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_error_flag(void)
 */
static PyObject *
_inPzUjA4RgX(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    bool return_value = interrogate_error_flag();
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_manifests(void)
 */
static PyObject *
_inPzUjA3Gip(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_manifests();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_manifest(int n)
 */
static PyObject *
_inPzUjARKDz(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_manifest((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_manifest_by_name(char const *manifest_name)
 */
static PyObject *
_inPzUjAgZ9N(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_manifest_by_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_manifest_name(int manifest)
 */
static PyObject *
_inPzUjARQIx(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_manifest_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_manifest_definition(int manifest)
 */
static PyObject *
_inPzUjAGVSj(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_manifest_definition((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_manifest_has_type(int manifest)
 */
static PyObject *
_inPzUjAznM6(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_manifest_has_type((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_manifest_get_type(int manifest)
 */
static PyObject *
_inPzUjAjiLg(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_manifest_get_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_manifest_has_getter(int manifest)
 */
static PyObject *
_inPzUjA_yjE(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_manifest_has_getter((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_manifest_getter(int manifest)
 */
static PyObject *
_inPzUjAzK9F(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_manifest_getter((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_manifest_has_int_value(int manifest)
 */
static PyObject *
_inPzUjAJju_(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_manifest_has_int_value((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_manifest_get_int_value(int manifest)
 */
static PyObject *
_inPzUjAZktk(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_manifest_get_int_value((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_element_name(int element)
 */
static PyObject *
_inPzUjAG71J(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_element_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_element_scoped_name(int element)
 */
static PyObject *
_inPzUjAgeUs(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_element_scoped_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_element_by_name(char const *element_name)
 */
static PyObject *
_inPzUjAkg95(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_element_by_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_element_by_scoped_name(char const *element_name)
 */
static PyObject *
_inPzUjAluRc(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_element_by_scoped_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_element_type(int element)
 */
static PyObject *
_inPzUjAwtTf(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_element_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_element_has_getter(int element)
 */
static PyObject *
_inPzUjArfao(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_element_has_getter((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_element_getter(int element)
 */
static PyObject *
_inPzUjAcedk(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_element_getter((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_element_has_setter(int element)
 */
static PyObject *
_inPzUjAXmoo(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_element_has_setter((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_element_setter(int element)
 */
static PyObject *
_inPzUjAclIo(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_element_setter((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_globals(void)
 */
static PyObject *
_inPzUjAU2_B(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_globals();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_global(int n)
 */
static PyObject *
_inPzUjAHFO2(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_global((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_global_functions(void)
 */
static PyObject *
_inPzUjAcfjm(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_global_functions();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_global_function(int n)
 */
static PyObject *
_inPzUjA3Sjw(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_global_function((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_functions(void)
 */
static PyObject *
_inPzUjAgJcX(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_functions();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_function(int n)
 */
static PyObject *
_inPzUjAYlw6(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_function((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_name(int function)
 */
static PyObject *
_inPzUjA3gns(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_scoped_name(int function)
 */
static PyObject *
_inPzUjAN968(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_scoped_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_has_comment(int function)
 */
static PyObject *
_inPzUjAFJVJ(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_has_comment((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_comment(int function)
 */
static PyObject *
_inPzUjAndTW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_comment((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_prototype(int function)
 */
static PyObject *
_inPzUjApjWj(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_prototype((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_is_method(int function)
 */
static PyObject *
_inPzUjANcQW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_is_method((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_class(int function)
 */
static PyObject *
_inPzUjAP_SX(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_function_class((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_has_module_name(int function)
 */
static PyObject *
_inPzUjA1iRq(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_has_module_name((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_module_name(int function)
 */
static PyObject *
_inPzUjAEmel(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_module_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_has_library_name(int function)
 */
static PyObject *
_inPzUjA20Vx(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_has_library_name((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_library_name(int function)
 */
static PyObject *
_inPzUjAKcdW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_library_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_is_virtual(int function)
 */
static PyObject *
_inPzUjAhUs9(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_is_virtual((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_number_of_c_wrappers(int function)
 */
static PyObject *
_inPzUjAhF25(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_function_number_of_c_wrappers((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_c_wrapper(int function, int n)
 */
static PyObject *
_inPzUjAu1qB(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_function_c_wrapper((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_number_of_python_wrappers(int function)
 */
static PyObject *
_inPzUjAKMkY(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_function_number_of_python_wrappers((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_python_wrapper(int function, int n)
 */
static PyObject *
_inPzUjARx9W(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_function_python_wrapper((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_name(int wrapper)
 */
static PyObject *
_inPzUjA0C9G(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_wrapper_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_is_callable_by_name(int wrapper)
 */
static PyObject *
_inPzUjAhaPp(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_is_callable_by_name((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_has_comment(int wrapper)
 */
static PyObject *
_inPzUjAt_1v(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_has_comment((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_comment(int wrapper)
 */
static PyObject *
_inPzUjA8KQG(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_wrapper_comment((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_has_return_value(int wrapper)
 */
static PyObject *
_inPzUjAEtIl(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_has_return_value((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_return_type(int wrapper)
 */
static PyObject *
_inPzUjARFmo(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_wrapper_return_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_caller_manages_return_value(int wrapper)
 */
static PyObject *
_inPzUjAWHA0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_caller_manages_return_value((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_return_value_destructor(int wrapper)
 */
static PyObject *
_inPzUjAcyIl(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_wrapper_return_value_destructor((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_number_of_parameters(int wrapper)
 */
static PyObject *
_inPzUjABnBv(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_wrapper_number_of_parameters((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_parameter_type(int wrapper, int n)
 */
static PyObject *
_inPzUjAUvW7(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_wrapper_parameter_type((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_parameter_has_name(int wrapper, int n)
 */
static PyObject *
_inPzUjAPdXf(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_wrapper_parameter_has_name((int)param0, (int)param1);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_parameter_name(int wrapper, int n)
 */
static PyObject *
_inPzUjAd0dl(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    char const *return_value = interrogate_wrapper_parameter_name((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_parameter_is_this(int wrapper, int n)
 */
static PyObject *
_inPzUjAdVbH(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_wrapper_parameter_is_this((int)param0, (int)param1);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_has_pointer(int wrapper)
 */
static PyObject *
_inPzUjABwF0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_has_pointer((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * void *interrogate_wrapper_pointer(int wrapper)
 */
static PyObject *
_inPzUjA9dPK(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    interrogate_wrapper_pointer((int)param0);
    return Py_BuildValue("");
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_unique_name(int wrapper)
 */
static PyObject *
_inPzUjAhUwR(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_wrapper_unique_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_wrapper_by_unique_name(char const *unique_name)
 */
static PyObject *
_inPzUjAA1eF(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_wrapper_by_unique_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_make_seq_class(int make_seq)
 */
static PyObject *
_inPzUjA8pBy(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_make_seq_class((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_make_seq_seq_name(int make_seq)
 */
static PyObject *
_inPzUjA85oW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_make_seq_seq_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_make_seq_num_name(int make_seq)
 */
static PyObject *
_inPzUjAYZz0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_make_seq_num_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_make_seq_element_name(int make_seq)
 */
static PyObject *
_inPzUjAzKCA(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_make_seq_element_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_global_types(void)
 */
static PyObject *
_inPzUjAsxxs(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_global_types();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_global_type(int n)
 */
static PyObject *
_inPzUjAMT0z(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_global_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_types(void)
 */
static PyObject *
_inPzUjAiW3v(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_types();
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type(int n)
 */
static PyObject *
_inPzUjA4Px8(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type_by_name(char const *type_name)
 */
static PyObject *
_inPzUjANHcs(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_type_by_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type_by_scoped_name(char const *type_name)
 */
static PyObject *
_inPzUjAqHrb(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_type_by_scoped_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type_by_true_name(char const *type_name)
 */
static PyObject *
_inPzUjAaOqq(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_type_by_true_name((char const *)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_name(int type)
 */
static PyObject *
_inPzUjAvue5(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_scoped_name(int type)
 */
static PyObject *
_inPzUjAB_n_(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_scoped_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_true_name(int type)
 */
static PyObject *
_inPzUjADFET(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_true_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_nested(int type)
 */
static PyObject *
_inPzUjAUyNE(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_nested((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_outer_class(int type)
 */
static PyObject *
_inPzUjApDlm(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_outer_class((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_comment(int type)
 */
static PyObject *
_inPzUjAAscF(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_comment((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_comment(int type)
 */
static PyObject *
_inPzUjAYjbU(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_comment((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_module_name(int type)
 */
static PyObject *
_inPzUjAWmpU(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_module_name((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_module_name(int type)
 */
static PyObject *
_inPzUjAnegH(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_module_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_library_name(int type)
 */
static PyObject *
_inPzUjArrnF(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_library_name((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_library_name(int type)
 */
static PyObject *
_inPzUjA7ShX(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_library_name((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_atomic(int type)
 */
static PyObject *
_inPzUjAx_aO(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_atomic((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * AtomicToken interrogate_type_atomic_token(int type)
 */
static PyObject *
_inPzUjApofZ(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    AtomicToken return_value = interrogate_type_atomic_token((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_unsigned(int type)
 */
static PyObject *
_inPzUjA2J9C(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_unsigned((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_signed(int type)
 */
static PyObject *
_inPzUjAA6iz(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_signed((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_long(int type)
 */
static PyObject *
_inPzUjAa78E(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_long((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_longlong(int type)
 */
static PyObject *
_inPzUjAWD3W(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_longlong((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_short(int type)
 */
static PyObject *
_inPzUjAYuud(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_short((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_wrapped(int type)
 */
static PyObject *
_inPzUjAlmJS(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_wrapped((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_pointer(int type)
 */
static PyObject *
_inPzUjALlrr(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_pointer((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_const(int type)
 */
static PyObject *
_inPzUjAw_wy(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_const((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_wrapped_type(int type)
 */
static PyObject *
_inPzUjAgk_l(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_wrapped_type((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_enum(int type)
 */
static PyObject *
_inPzUjAXpHY(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_enum((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_enum_values(int type)
 */
static PyObject *
_inPzUjAHhIg(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_enum_values((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_enum_value_name(int type, int n)
 */
static PyObject *
_inPzUjAff0T(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    char const *return_value = interrogate_type_enum_value_name((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_enum_value_scoped_name(int type, int n)
 */
static PyObject *
_inPzUjA5PPX(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    char const *return_value = interrogate_type_enum_value_scoped_name((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(return_value);
#else
    return PyString_FromString(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_enum_value(int type, int n)
 */
static PyObject *
_inPzUjAPww5(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_enum_value((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_struct(int type)
 */
static PyObject *
_inPzUjAPke3(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_struct((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_class(int type)
 */
static PyObject *
_inPzUjAJmw3(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_class((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_union(int type)
 */
static PyObject *
_inPzUjAR0Lc(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_union((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_fully_defined(int type)
 */
static PyObject *
_inPzUjAc6gE(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_fully_defined((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_unpublished(int type)
 */
static PyObject *
_inPzUjA1iT0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_unpublished((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_constructors(int type)
 */
static PyObject *
_inPzUjAz1Mn(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_constructors((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_constructor(int type, int n)
 */
static PyObject *
_inPzUjAWlf2(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_constructor((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_destructor(int type)
 */
static PyObject *
_inPzUjA1q8q(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_destructor((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_destructor_is_inherited(int type)
 */
static PyObject *
_inPzUjAobo6(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_destructor_is_inherited((int)param0);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_destructor(int type)
 */
static PyObject *
_inPzUjAjevK(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_get_destructor((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_elements(int type)
 */
static PyObject *
_inPzUjAeBpM(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_elements((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_element(int type, int n)
 */
static PyObject *
_inPzUjAfmeN(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_element((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_methods(int type)
 */
static PyObject *
_inPzUjAKBCl(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_methods((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_method(int type, int n)
 */
static PyObject *
_inPzUjA936K(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_method((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_make_seqs(int type)
 */
static PyObject *
_inPzUjAPPXQ(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_make_seqs((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_make_seq(int type, int n)
 */
static PyObject *
_inPzUjAnu86(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_make_seq((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_casts(int type)
 */
static PyObject *
_inPzUjAngiq(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_casts((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_cast(int type, int n)
 */
static PyObject *
_inPzUjAUXR0(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_cast((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_derivations(int type)
 */
static PyObject *
_inPzUjADO7D(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_derivations((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_derivation(int type, int n)
 */
static PyObject *
_inPzUjAhZFz(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_derivation((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_derivation_has_upcast(int type, int n)
 */
static PyObject *
_inPzUjAnKPe(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_type_derivation_has_upcast((int)param0, (int)param1);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_upcast(int type, int n)
 */
static PyObject *
_inPzUjAP3lS(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_upcast((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_derivation_downcast_is_impossible(int type, int n)
 */
static PyObject *
_inPzUjAUlLp(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_type_derivation_downcast_is_impossible((int)param0, (int)param1);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_derivation_has_downcast(int type, int n)
 */
static PyObject *
_inPzUjA9Xei(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_type_derivation_has_downcast((int)param0, (int)param1);
    return PyBool_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_downcast(int type, int n)
 */
static PyObject *
_inPzUjAaGkE(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_downcast((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_nested_types(int type)
 */
static PyObject *
_inPzUjAoe_l(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_nested_types((int)param0);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_nested_type(int type, int n)
 */
static PyObject *
_inPzUjAuEdH(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_nested_type((int)param0, (int)param1);
#if PY_MAJOR_VERSION >= 3
    return PyLong_FromLong(return_value);
#else
    return PyInt_FromLong(return_value);
#endif
  }
  return (PyObject *)NULL;
}


static PyMethodDef python_simple_funcs[] = {
  { "interrogate_add_search_directory", &_inPzUjAtbRf, METH_VARARGS },
  { "interrogate_add_search_path", &_inPzUjAda_g, METH_VARARGS },
  { "interrogate_error_flag", &_inPzUjA4RgX, METH_VARARGS },
  { "interrogate_number_of_manifests", &_inPzUjA3Gip, METH_VARARGS },
  { "interrogate_get_manifest", &_inPzUjARKDz, METH_VARARGS },
  { "interrogate_get_manifest_by_name", &_inPzUjAgZ9N, METH_VARARGS },
  { "interrogate_manifest_name", &_inPzUjARQIx, METH_VARARGS },
  { "interrogate_manifest_definition", &_inPzUjAGVSj, METH_VARARGS },
  { "interrogate_manifest_has_type", &_inPzUjAznM6, METH_VARARGS },
  { "interrogate_manifest_get_type", &_inPzUjAjiLg, METH_VARARGS },
  { "interrogate_manifest_has_getter", &_inPzUjA_yjE, METH_VARARGS },
  { "interrogate_manifest_getter", &_inPzUjAzK9F, METH_VARARGS },
  { "interrogate_manifest_has_int_value", &_inPzUjAJju_, METH_VARARGS },
  { "interrogate_manifest_get_int_value", &_inPzUjAZktk, METH_VARARGS },
  { "interrogate_element_name", &_inPzUjAG71J, METH_VARARGS },
  { "interrogate_element_scoped_name", &_inPzUjAgeUs, METH_VARARGS },
  { "interrogate_get_element_by_name", &_inPzUjAkg95, METH_VARARGS },
  { "interrogate_get_element_by_scoped_name", &_inPzUjAluRc, METH_VARARGS },
  { "interrogate_element_type", &_inPzUjAwtTf, METH_VARARGS },
  { "interrogate_element_has_getter", &_inPzUjArfao, METH_VARARGS },
  { "interrogate_element_getter", &_inPzUjAcedk, METH_VARARGS },
  { "interrogate_element_has_setter", &_inPzUjAXmoo, METH_VARARGS },
  { "interrogate_element_setter", &_inPzUjAclIo, METH_VARARGS },
  { "interrogate_number_of_globals", &_inPzUjAU2_B, METH_VARARGS },
  { "interrogate_get_global", &_inPzUjAHFO2, METH_VARARGS },
  { "interrogate_number_of_global_functions", &_inPzUjAcfjm, METH_VARARGS },
  { "interrogate_get_global_function", &_inPzUjA3Sjw, METH_VARARGS },
  { "interrogate_number_of_functions", &_inPzUjAgJcX, METH_VARARGS },
  { "interrogate_get_function", &_inPzUjAYlw6, METH_VARARGS },
  { "interrogate_function_name", &_inPzUjA3gns, METH_VARARGS },
  { "interrogate_function_scoped_name", &_inPzUjAN968, METH_VARARGS },
  { "interrogate_function_has_comment", &_inPzUjAFJVJ, METH_VARARGS },
  { "interrogate_function_comment", &_inPzUjAndTW, METH_VARARGS },
  { "interrogate_function_prototype", &_inPzUjApjWj, METH_VARARGS },
  { "interrogate_function_is_method", &_inPzUjANcQW, METH_VARARGS },
  { "interrogate_function_class", &_inPzUjAP_SX, METH_VARARGS },
  { "interrogate_function_has_module_name", &_inPzUjA1iRq, METH_VARARGS },
  { "interrogate_function_module_name", &_inPzUjAEmel, METH_VARARGS },
  { "interrogate_function_has_library_name", &_inPzUjA20Vx, METH_VARARGS },
  { "interrogate_function_library_name", &_inPzUjAKcdW, METH_VARARGS },
  { "interrogate_function_is_virtual", &_inPzUjAhUs9, METH_VARARGS },
  { "interrogate_function_number_of_c_wrappers", &_inPzUjAhF25, METH_VARARGS },
  { "interrogate_function_c_wrapper", &_inPzUjAu1qB, METH_VARARGS },
  { "interrogate_function_number_of_python_wrappers", &_inPzUjAKMkY, METH_VARARGS },
  { "interrogate_function_python_wrapper", &_inPzUjARx9W, METH_VARARGS },
  { "interrogate_wrapper_name", &_inPzUjA0C9G, METH_VARARGS },
  { "interrogate_wrapper_is_callable_by_name", &_inPzUjAhaPp, METH_VARARGS },
  { "interrogate_wrapper_has_comment", &_inPzUjAt_1v, METH_VARARGS },
  { "interrogate_wrapper_comment", &_inPzUjA8KQG, METH_VARARGS },
  { "interrogate_wrapper_has_return_value", &_inPzUjAEtIl, METH_VARARGS },
  { "interrogate_wrapper_return_type", &_inPzUjARFmo, METH_VARARGS },
  { "interrogate_wrapper_caller_manages_return_value", &_inPzUjAWHA0, METH_VARARGS },
  { "interrogate_wrapper_return_value_destructor", &_inPzUjAcyIl, METH_VARARGS },
  { "interrogate_wrapper_number_of_parameters", &_inPzUjABnBv, METH_VARARGS },
  { "interrogate_wrapper_parameter_type", &_inPzUjAUvW7, METH_VARARGS },
  { "interrogate_wrapper_parameter_has_name", &_inPzUjAPdXf, METH_VARARGS },
  { "interrogate_wrapper_parameter_name", &_inPzUjAd0dl, METH_VARARGS },
  { "interrogate_wrapper_parameter_is_this", &_inPzUjAdVbH, METH_VARARGS },
  { "interrogate_wrapper_has_pointer", &_inPzUjABwF0, METH_VARARGS },
  { "interrogate_wrapper_pointer", &_inPzUjA9dPK, METH_VARARGS },
  { "interrogate_wrapper_unique_name", &_inPzUjAhUwR, METH_VARARGS },
  { "interrogate_get_wrapper_by_unique_name", &_inPzUjAA1eF, METH_VARARGS },
  { "interrogate_make_seq_class", &_inPzUjA8pBy, METH_VARARGS },
  { "interrogate_make_seq_seq_name", &_inPzUjA85oW, METH_VARARGS },
  { "interrogate_make_seq_num_name", &_inPzUjAYZz0, METH_VARARGS },
  { "interrogate_make_seq_element_name", &_inPzUjAzKCA, METH_VARARGS },
  { "interrogate_number_of_global_types", &_inPzUjAsxxs, METH_VARARGS },
  { "interrogate_get_global_type", &_inPzUjAMT0z, METH_VARARGS },
  { "interrogate_number_of_types", &_inPzUjAiW3v, METH_VARARGS },
  { "interrogate_get_type", &_inPzUjA4Px8, METH_VARARGS },
  { "interrogate_get_type_by_name", &_inPzUjANHcs, METH_VARARGS },
  { "interrogate_get_type_by_scoped_name", &_inPzUjAqHrb, METH_VARARGS },
  { "interrogate_get_type_by_true_name", &_inPzUjAaOqq, METH_VARARGS },
  { "interrogate_type_name", &_inPzUjAvue5, METH_VARARGS },
  { "interrogate_type_scoped_name", &_inPzUjAB_n_, METH_VARARGS },
  { "interrogate_type_true_name", &_inPzUjADFET, METH_VARARGS },
  { "interrogate_type_is_nested", &_inPzUjAUyNE, METH_VARARGS },
  { "interrogate_type_outer_class", &_inPzUjApDlm, METH_VARARGS },
  { "interrogate_type_has_comment", &_inPzUjAAscF, METH_VARARGS },
  { "interrogate_type_comment", &_inPzUjAYjbU, METH_VARARGS },
  { "interrogate_type_has_module_name", &_inPzUjAWmpU, METH_VARARGS },
  { "interrogate_type_module_name", &_inPzUjAnegH, METH_VARARGS },
  { "interrogate_type_has_library_name", &_inPzUjArrnF, METH_VARARGS },
  { "interrogate_type_library_name", &_inPzUjA7ShX, METH_VARARGS },
  { "interrogate_type_is_atomic", &_inPzUjAx_aO, METH_VARARGS },
  { "interrogate_type_atomic_token", &_inPzUjApofZ, METH_VARARGS },
  { "interrogate_type_is_unsigned", &_inPzUjA2J9C, METH_VARARGS },
  { "interrogate_type_is_signed", &_inPzUjAA6iz, METH_VARARGS },
  { "interrogate_type_is_long", &_inPzUjAa78E, METH_VARARGS },
  { "interrogate_type_is_longlong", &_inPzUjAWD3W, METH_VARARGS },
  { "interrogate_type_is_short", &_inPzUjAYuud, METH_VARARGS },
  { "interrogate_type_is_wrapped", &_inPzUjAlmJS, METH_VARARGS },
  { "interrogate_type_is_pointer", &_inPzUjALlrr, METH_VARARGS },
  { "interrogate_type_is_const", &_inPzUjAw_wy, METH_VARARGS },
  { "interrogate_type_wrapped_type", &_inPzUjAgk_l, METH_VARARGS },
  { "interrogate_type_is_enum", &_inPzUjAXpHY, METH_VARARGS },
  { "interrogate_type_number_of_enum_values", &_inPzUjAHhIg, METH_VARARGS },
  { "interrogate_type_enum_value_name", &_inPzUjAff0T, METH_VARARGS },
  { "interrogate_type_enum_value_scoped_name", &_inPzUjA5PPX, METH_VARARGS },
  { "interrogate_type_enum_value", &_inPzUjAPww5, METH_VARARGS },
  { "interrogate_type_is_struct", &_inPzUjAPke3, METH_VARARGS },
  { "interrogate_type_is_class", &_inPzUjAJmw3, METH_VARARGS },
  { "interrogate_type_is_union", &_inPzUjAR0Lc, METH_VARARGS },
  { "interrogate_type_is_fully_defined", &_inPzUjAc6gE, METH_VARARGS },
  { "interrogate_type_is_unpublished", &_inPzUjA1iT0, METH_VARARGS },
  { "interrogate_type_number_of_constructors", &_inPzUjAz1Mn, METH_VARARGS },
  { "interrogate_type_get_constructor", &_inPzUjAWlf2, METH_VARARGS },
  { "interrogate_type_has_destructor", &_inPzUjA1q8q, METH_VARARGS },
  { "interrogate_type_destructor_is_inherited", &_inPzUjAobo6, METH_VARARGS },
  { "interrogate_type_get_destructor", &_inPzUjAjevK, METH_VARARGS },
  { "interrogate_type_number_of_elements", &_inPzUjAeBpM, METH_VARARGS },
  { "interrogate_type_get_element", &_inPzUjAfmeN, METH_VARARGS },
  { "interrogate_type_number_of_methods", &_inPzUjAKBCl, METH_VARARGS },
  { "interrogate_type_get_method", &_inPzUjA936K, METH_VARARGS },
  { "interrogate_type_number_of_make_seqs", &_inPzUjAPPXQ, METH_VARARGS },
  { "interrogate_type_get_make_seq", &_inPzUjAnu86, METH_VARARGS },
  { "interrogate_type_number_of_casts", &_inPzUjAngiq, METH_VARARGS },
  { "interrogate_type_get_cast", &_inPzUjAUXR0, METH_VARARGS },
  { "interrogate_type_number_of_derivations", &_inPzUjADO7D, METH_VARARGS },
  { "interrogate_type_get_derivation", &_inPzUjAhZFz, METH_VARARGS },
  { "interrogate_type_derivation_has_upcast", &_inPzUjAnKPe, METH_VARARGS },
  { "interrogate_type_get_upcast", &_inPzUjAP3lS, METH_VARARGS },
  { "interrogate_type_derivation_downcast_is_impossible", &_inPzUjAUlLp, METH_VARARGS },
  { "interrogate_type_derivation_has_downcast", &_inPzUjA9Xei, METH_VARARGS },
  { "interrogate_type_get_downcast", &_inPzUjAaGkE, METH_VARARGS },
  { "interrogate_type_number_of_nested_types", &_inPzUjAoe_l, METH_VARARGS },
  { "interrogate_type_get_nested_type", &_inPzUjAuEdH, METH_VARARGS },
  { NULL, NULL }
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef python_simple_module = {
  PyModuleDef_HEAD_INIT,
  "libp3dtoolconfig",
  NULL,
  -1,
  python_simple_funcs,
  NULL, NULL, NULL, NULL
};

#define INIT_FUNC PyObject *PyInit_libp3dtoolconfig
#else
#define INIT_FUNC void initlibp3dtoolconfig
#endif

#ifdef _WIN32
extern "C" __declspec(dllexport) INIT_FUNC();
#else
extern "C" INIT_FUNC();
#endif

INIT_FUNC() {
#if PY_MAJOR_VERSION >= 3
  return PyModule_Create(&python_simple_module);
#else
  Py_InitModule("libp3dtoolconfig", python_simple_funcs);
#endif
}

